generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  FirstName       String?
  FatherName      String?
  GrandFatherName String?
  FamilyName      String?
  username        String          @unique
  email           String          @unique
  NationalID      String?         @unique
  BDate           DateTime?
  MobileNumber    String?
  password        String
  image           String?
  role            Role?           @default(USER)
  swiftCode       String?
  bankName        String?
  IBAN            String?         @unique
  adminActivities AdminActivity[]
  camels          Camel[]
  CamelHistory    CamelHistory[]
  RaceResult      RaceResult[]
  ads             ads[]
  contactPages    contactPage[]
  news            news[]
  PasswordReset   PasswordReset[]
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Camel {
  id         Int          @id @default(autoincrement())
  name       String
  camelID    String       @unique
  age        Age
  sex        Sex
  ownerId    String
  disabled   Boolean      @default(false)
  owner      User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  loops      CamelLoop[]
  RaceResult RaceResult[]
}

model Event {
  id         String       @id @default(cuid())
  name       String
  StartDate  DateTime
  EndDate    DateTime
  disabled   Boolean      @default(false)
  type       String       @default("International")
  loops      Loop[]
  RaceResult RaceResult[]
}

model Loop {
  id            String       @id @default(cuid())
  capacity      Int
  registered    Int          @default(autoincrement())
  age           Age
  sex           Sex
  time          Time
  startRegister DateTime
  endRegister   DateTime
  eventId       String
  number        Int
  rank          Int?
  CamelLoop     CamelLoop[]
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  RaceResult    RaceResult[]
}

model CamelLoop {
  id             String    @id @default(cuid())
  camelId        Int
  loopId         String
  registeredDate DateTime? @default(now()) @db.Timestamp(6)
  camel          Camel     @relation(fields: [camelId], references: [id], onDelete: Cascade)
  loop           Loop      @relation(fields: [loopId], references: [id], onDelete: Cascade)

  @@unique([camelId, loopId], name: "camel_unique_in_event")
}

model RaceResult {
  id         String  @id @default(cuid())
  rank       Int
  eventId    String
  ownerId    String
  camelId    Int
  loopId     String
  IBAN       String
  bankName   String
  swiftCode  String
  ownerName  String
  NationalID String?
  camelID    String?
  camel      Camel   @relation(fields: [camelId], references: [id], onDelete: Cascade)
  event      Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  loop       Loop    @relation(fields: [loopId], references: [id], onDelete: Cascade)
  owner      User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model CamelHistory {
  id            Int       @id @default(autoincrement())
  name          String
  camelID       String?
  age           String
  sex           String
  ownerId       String?
  Date          DateTime? @db.Timestamp(6)
  typeOfMethode String?
  User          User?     @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_loops_loop_id")
}

model news {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(36)
  title       String   @db.VarChar(255)
  description String
  date        DateTime @db.Timestamp(6)
  author_id   String   @db.VarChar(36)
  startDate   DateTime @default(now()) @db.Timestamp(6)
  endDate     DateTime @default(now()) @db.Timestamp(6)
  isVisible   Boolean  @default(true)
  User        User     @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_author")
}

model ads {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(36)
  title       String   @db.VarChar(255)
  description String
  date        DateTime @db.Timestamp(6)
  author_id   String   @db.VarChar(36)
  startDate   DateTime @default(now()) @db.Timestamp(6)
  endDate     DateTime @default(now()) @db.Timestamp(6)
  isVisible   Boolean  @default(true)
  User        User     @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_author_ads")
}

model contactPage {
  id        String   @id @db.VarChar(36)
  content   String
  updatedAt DateTime @updatedAt
  author_id String?  @db.VarChar(36)
  User      User?    @relation(fields: [author_id], references: [id], onUpdate: NoAction, map: "fk_contact_author")
}

model AdminActivity {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(36)
  userId    String
  type      String
  path      String
  element   String?
  meta      Json?
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  action    String[]  @default([])
  details   String[]  @db.Char
  timestamp DateTime? @db.Date
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdsConfig {
  id          Int       @id @default(autoincrement())
  apikey      String    @db.Char(1)
  apisecret   String?   @db.Char(1)
  cloudname   String?   @db.Char(1)
  apiendpoint String    @db.Char(1)
  updatedat   DateTime? @db.Date
  isEnabled   Boolean   @default(true)
}

enum Role {
  ADMIN
  SUPERVISOR
  USER
  RESULTS_EDITOR
}

enum Sex {
  Male
  Female
}

enum Age {
  GradeOne
  GradeTwo
  GradeThree
  GradeFour
  GradeFive
  GradeSixMale
  GradeSixFemale
}

enum Time {
  Morning
  Evening
}
